For this assignment you will need to plan and write a collection of
algorithms to implement some simple linear algebra operations. For each
algorithm you must write and answer the three questions as the first step. Your answers to the
three questions must match the algorithm you write. You should begin each
algorithm by giving it a function name, see the example for more details.

Your algorithms must match the style used in the example given. Do not copy the
versions of these algorithms written in class. This is intended to be the "next
step" in improving our initial work. You are encouraged to use those versions to help in your
writing of these algorithms.  

Your work must be typed up into this document and uploaded to blackboard. 

This assignment is due by 11:59pm on 09/17/2021. Late work will not be accepted. 


Example:

Problem #0

Write an algorithm to implement vector addition. 


Q1: What do we have?

A1: Two vectors stored as lists. Denoted by the names vector_a and vector_b. 

Q2: What do we want?

A2: Their sum stored as a list.

Q3: How will we get there?

A3: We will create an empty list of the appropriate size and store the sums of
the corresponding components of vector_a and vector_b. 


def add_vectors(vector_a,vector_b):

# Initializing result as an empty list
result = []

# Add an element to result for each element of vector_a. Set that element to 0.
for element in vector_a:
  append 0 to result

# Set each element of result to be equal to the desired sum.
for index in range(length(result)):
  result[index] = vector_a[index] + vector_b[index]

# Return the desired result.
return result



End Example


Problem #1

Write an algorithm to implement scalar-vector multiplication.

Q1: What do we have?
A1: A vector "vector" stored as a list and a scalar "scalar" stored as an integer

Q2: What do we want?
A2: The product of vector and scalar stored as a list

Q3: How will we get there?
A3: Create an empty list and then store vector times scalar by appending, in
    order, the scalar multiplied by each element of vector

def vector_scalar_multiply(vector, scalar):

  # Create a new list to server as our resultant vector
  product_vector = []

  # Compute the product by calculating each element then append it to result
  for element in vector:
    append (element * scalar) to product_vector

  # Return our product vector
  return product_vector
 
  
Problem #2

Write an algorithm to implement scalar-matrix multiplication.

Q1: What do we have?
A1: A matrix "matrix" stored as a 2D list where each component list represents
    a column vector, and a scalar "scalar" stored as an integer

Q2: What do we want?
A2: The product of matrix and scalar stored as a 2D list where each component
    lists represents a column vector

Q3: How will we get there?
A3: Create an empty list then append in order each component vector of matrix 
    multiplied by the scalar

def matrix_scalar_multiply(matrix, scalar):
  
  # Create a new list to serve as our resultant matrix
  product_matrix = []

  # Compute the product by calculating the product of each vector times the
  # scalar, and appending it to our result
  for vector in matrix:
    append vector_scalar_multiply(vector, scalar) to product_matrix

  # Return our product matrix
  return product_matrix


Problem #3

Write an algorithm to implement matrix addition.

Q1: What do we have?
A1: Two matrices "matrix_a" and "matrix_b", stored as a 2D list, where each
    component list represents a column vector. Assumed to be the same size.

Q2: What do we want?
A2: The sum of matrix_a and matrix_b, stored as a 2D list, where each
    component list represents a column vector.

Q3: How will we get there?
A3: Create an empty list then append in order the sum of each corresponding
    component vector of matrix_a and matrix_b

def matrix_add(matrix_a, matrix_b):

  # Create a new list to server as our resultant matrix
  matrix_sum = []

  # Compute the sum by calculating the sum of each pair of corresponding
  # vectors in matrix_a and matrix_b
  for index in range(length(matrix_a)):
    append add_vectors(matrix_a[index], matrix_b[index]) to matrix_sum

  # Return our sum matrix
  return matrix_sum


Problem #4

Write an algorithm to implement matrix-vector multiplication using the linear
combination of columns method. You must use the algorithms from Problem #0 and
Problem #1.  

Q1: What do we have?
A1: A matrix "matrix" stored as a 2D list, where each component list
    represents a column vector, and a column vector "vector", store as a list.
    Assumed to be compatible to multiply.

Q2: What do we want?
A2: The matrix-vector product of matrix and vector stored as a 2D list, where
    each component list represents a column vector.

Q3: How will we get there?
A3: Use the linear combination of columns method to multiply matrix and vector.
    I.e. multiply each column of matrix by the corresponding element of vector,
    then sum each resulting vector and return that final resultant vector.

def matrix_vector_multiply(matrix, vector):
  
  # Initialize a resultant vector full of 0s
  product_vector = []

  for element in matrix[0]:
    append 0 to product_vector

  # Initialize a list to store our intermediate vectors
  inter_vectors = []
  
  # Calculate the product of each column of matrix with the corresponding
  # element of vector
  for index in range(length(vector)):
    append vector_scalar_multiply(matrix[index], vector[index]) to inter_vectors

  # Calculate the final result by adding each intermediate vector
  for inter_vector in inter_vectors:
    product_vector = add_vectors(product_vector, inter_vector)

  # Return our product vector
  return product_vector


Problem #5

Write an algorithm to implement matrix-matrix multiplication using your
algorithm from Problem #4.  

Q1: What do we have?
A1: Two matrices, "left_matrix" and "right_matrix", each stored as a 2D list
    where each component list represents a column vector. Assumed to be
    compatible to multiply.

Q2: What do we want?
A2: A matrix that is the product of left_matrix and right_matrix, stored as a
    2D list where each component list represents a column vector.

Q3: How will we get there?
A3: Create an empty list to represent the resultant matrix, then calculate each
    column using a linear combination of columns and append to the resultant
    matrix.

def matrix_multiply(left_matrix, right_matrix):
  
  # Define our resultant matrix
  matrix_product = []

  # Calculate each column using linear combination of columns and append to
  # the resultant matrix
  for column in right_matrix:
    append matrix_vector_multiply(left_matrix, column) to matrix_product

  # Return our resultant matrix
  return matrix_product

